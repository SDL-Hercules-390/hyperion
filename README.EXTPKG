-------------------------------------------------------------------------------
                    HERCULES "External Packages" README
-------------------------------------------------------------------------------


                              OVERVIEW


This version of Hercules 4.0 Hyperion links with several "external package"
static libraries.

Hercules comes distributed with pre-built external packages as part of its
source code repository that were built, at the timeof this writing, using
the latest version of Visual Studio (2017) that ideally SHOULD work fine
for most everyone as-is, thereby eliminating the need to build any of the
external packages yourself.  Just build Hercules normally and you're done.

In some situations however you might need (or want) to rebuild one or more
of the external packages for your system.  Some (but certainly not all) of
those situations include (but are not limited to) the following:

  1. Developing or Debugging a new/existing version of an external package.
  2. Building Hercules for a different version of Visual Studio.
  3. Building Hercules for a different processor architecture or for an
     unusual non-mainstream *Nix platform (Apple Mac, Raspberry Pi, etc).

Each package is maintained in its own unique source code repository separate
from the Hercules emulator itself.  The Hercules 4.0 Hyperion repository only
hosts the package's static library (along with a few accompanying files) in
a separate external package subdirectory.  All of the package's source code
is kept in its own separate source code repository.  The Hercules repository
no longer contains any source code for these external packages.  The Hercules
repository only contains the package's static link libraries and whatever
header files the package requires to call into its functions.

Each external package is built separately from the Hercules emulator and then
"installed" into a directory of your choosing.  On Windows, the 'lib' sub-
directoty of this external packages "installation directory" should then be
specified in your "LIB" environment variable so that Hercules can then find
your custom built external package static libraries. (On *Nix the equivalent
variable would be the "LIBRARY_PATH" variable.)

Currently, there are four such external packages this Hercules 4.0 Hyperion
links with.  These packages are the "crypto", "decNumber", "SoftFloat", and
"telnet" packages.  Each of these package names correspond to an existing
subdirectory of Hyperion.  Over time additional Hercules functionality will
be moved out of the emulator into their own separately maintained and built
external package repositories, eventually reducing the Hercules emulator to
just its core functionality: accurate emulation of the System/370, ESA/390,
and z architectures.

The four repositories for the external packages can be located at these URLs:


    https://github.com/sdl-hercules-390/crypto
    https://github.com/sdl-hercules-390/decNumber
    https://github.com/sdl-hercules-390/SoftFloat
    https://github.com/sdl-hercules-390/telnet


The procedure for building each of the external packages is outlined further
below.  More information about each of the packages can be found in a README
document within each of their respective repositories.

-------------------------------------------------------------------------------


                          LINUX (non-Windows)


  The procedure detailed below is explained from a Windows point of view,
  but the procedure for Linux is virtually identical.  If you are reasonably
  skilled at Linux you should have no trouble making the needed adjustments.

  One of the adjustments that must be made is to either point your "LIBRARY_
  PATH" variable to your '/extpkgs/lib' directory or else specify the the top
  '/extpkgs' directory in your "--enable-extpkgs=DIR" configure option.


-------------------------------------------------------------------------------


                      BUILDING THE EXTERNAL PACKAGES
                      FOR A WINDOWS-BASED HYPERION


Building the packages is a fairly simple and straightforward process and the
steps are outlined and then detailed below.  These steps presume you are using
Windows and that you need both the x86 and x64 builds of the external packages.


                        SUMMARY OF THE STEPS INVOLVED


  1.  Download and install CMake.
  2.  Make the directories to hold the source repositories.
  3.  Make a directory where all packages should be installed into.
  4.  Download each of the four external package source repositories.
  5.  Make work directories for each package to be used for building.
  6.  Build and install each external package via the 'build' command,
      installing each of them into the directory created in step 3.
  7.  Update your 'LIB' environment variable to point to the directory
      where your packages where installed to (e.g. \extpkgs\lib).
  8.  Build Hercules as normal.


For the purposes of this example, it is presumed that you have downloaded the
Hyperion repository and placed it into the \hyperion directory.  Then we will
follow the process to build the external packages and have them all installed
into the common \extpkgs installation directory.


                            DETAILED INSTRUCTIONS


1. Download and install CMake.  Cmake is a tool that is used to build the
   packages from their source repositories.  Download Cmake at this URL:

      https://cmake.org/

   Either download the .msi installer package or the .zip file and install
   Cmake.  It is simple and installs in seconds.


2. Make the directories that will be used to contain the source repositories.
   For best results, the lowest level directory name should be the same as
   the external package name.  For example:

      chdir  \
      mkdir  \repo        (for "repository")
      chdir  \repo

      mkdir  \crypto
      mkdir  \decNumber
      mkdir  \SoftFloat
      mkdir  \telnet


3. Make a directory where all packages should be installed into.

      chdir  \
      mkdir  \extpkgs


4. Download each of the four external package source repositories from the URLs
   above.  In this example, the .zip file will be downloaded for each package.

   Then unzip each of the repository .zip downloads into the correspondingly
   named source repository directory you just created.


5. Make the work directories that the build process will use:

      chdir  \
      mkdir  \work
      chdir  \work

      mkdir  \crypto
      mkdir  \decNumber
      mkdir  \SoftFloat
      mkdir  \telnet


6.  Now build each external package by making the package's "work" directory
    become the current directory and then issuing the "build" command(*) to
    build and install the package into the desired installation directory:


        chdir  \work\crypto

        \repo\crypto\build  --rebuild  --all  --install  \extpkgs


    Some output will be generated, but in a few moments it will be completed.
    OK, crypto is done!  Now simply do the very same thing for all remaining
    external packages:


        chdir \work\decNumber
        \repo\decNumber\build  --rebuild  --all --install  \extpkgs


        chdir \work\SoftFloat
        \repo\SoftFloat\build  --rebuild  --all --install  \extpkgs


        chdir \work\telnet
        \repo\telnet\build  --rebuild  --all --install  \extpkgs


7.  Update your 'LIB' environment variable (if neccessary) to point to the
    directory where your packages where installed into:


        setx LIB "%LIB%;\extpkgs\lib"


8.  Build Hercules as normal.  (Self explanatory)


That concludes the necessary steps to build the external packages.  You now
have the 32-bit and 64-bit versions of the Debug and Release builds of the
external packages.  If you desire, you may delete both the \repo and \work
directories as they are no longer needed.  You only need to keep the \extpkgs
directory needed by Hercules (pointed to by your 'LIB' environment variable).

If you clone the \hyperion directory or download a newer Hyperion repository
in the future, there is nothing extra you need to do.  You do *NOT* need to
rebuild the external packages ever again (unless they are updated of course).


---------------

(*)  Use "build --help" (Linux) or "build /?" (Windows) for more information
     regarding the build script's parameters.

-------------------------------------------------------------------------------
