*Testcase bim-001-add-sub.tst:   AR, AGR, SR and SGR

# Copyright 2018 Stephen R. Orso.
# Distributed under the Boost Software License, Version 1.0.  See
# accompanying file BOOST_LICENSE_1_0.txt or a copy at
# http://www.boost.org/LICENSE_1_0.txt)

# Expanded by Peter J. Jansen, 2019 

#Testcase bim-001-add-sub.tst: ADD and SUBtract

###########################################################################################

# set up, load, and run the test case

# Suppress logging of program checks. Processing of this test script
# intentionally generates program checks (fixed point overflow) as part
# of instruction test and validation.  Redtest.rexx treats these as
# errors if they show up in the Hercules log.  So suppress them.

ostailor quiet

# clear any prior test data/program/results
sysclear

# Run test in z/Arch mode
archmode esame

loadcore "$(testpath)/bim-001-add-sub.core"

# Run the program
runtest

# Restore program check messages

ostailor default

###########################################################################################

# Analyze results

*Compare

# Results from AR (32-bit operands and result, two operand)

r 1000.10
*Want "   M=7F..FF+   M=7F..FF,   M=7F..FF+   1=00..01" FFFFFFFE FFFFFFFE 80000000 80000000
r 1010.10
*Want "   M=7F..FF+   0=00..00,   M=7F..FF+  -1=FF..FF" 7FFFFFFF 7FFFFFFF 7FFFFFFE 7FFFFFFE
r 1020.10
*Want "   M=7F..FF+-M  =80..01,   M=7F..FF+-M-1=80..00" 00000000 00000000 FFFFFFFF FFFFFFFF
r 1030.10
*Want "   1=00..01+   M=7F..FF,   1=00..01+   1=00..01" 80000000 80000000 00000002 00000002
r 1040.10
*Want "   1=00..01+   0=00..00,   1=00..01+  -1=FF..FF" 00000001 00000001 00000000 00000000
r 1050.10
*Want "   1=00..01+-M  =80..01,   1=00..01+-M-1=80..00" 80000002 80000002 80000001 80000001
r 1060.10
*Want "   0=00..00+   M=7F..FF,   0=00..00+   1=00..01" 7FFFFFFF 7FFFFFFF 00000001 00000001
r 1070.10
*Want "   0=00..00+   0=00..00,   0=00..00+  -1=FF..FF" 00000000 00000000 FFFFFFFF FFFFFFFF
r 1080.10
*Want "   0=00..00+-M  =80..01,   0=00..00+-M-1=80..00" 80000001 80000001 80000000 80000000
r 1090.10
*Want "  -1=FF..FF+   M=7F..FF,  -1=FF..FF+   1=00..01" 7FFFFFFE 7FFFFFFE 00000000 00000000
r 10A0.10
*Want "  -1=FF..FF+   0=00..00,  -1=FF..FF+  -1=FF..FF" FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFE
r 10B0.10
*Want "  -1=FF..FF+-M  =80..01,  -1=FF..FF+-M-1=80..00" 80000000 80000000 7FFFFFFF 7FFFFFFF
r 10C0.10
*Want "-M  =80..01+   M=7F..FF,-M  =80..01+   1=00..01" 00000000 00000000 80000002 80000002
r 10D0.10
*Want "-M  =80..01+   0=00..00,-M  =80..01+  -1=FF..FF" 80000001 80000001 80000000 80000000
r 10E0.10
*Want "-M  =80..01+-M  =80..01,-M  =80..01+-M-1=80..00" 00000002 00000002 00000001 00000001
r 10F0.10
*Want "-M-1=80..00+   M=7F..FF,-M-1=80..00+  +1=00..01" FFFFFFFF FFFFFFFF 80000001 80000001
r 1100.10
*Want "-M-1=80..00+   0=00..00,-M-1=80..00+  -1=FF..FF" 80000000 80000000 7FFFFFFF 7FFFFFFF
r 1110.10
*Want "-M-1=80..00+-M  =80..01,-M-1=80..00+-M-1=80..00" 00000001 00000001 00000000 00000000

# Condition codes and fixed point overflow interruptions from AR (32-bit operands and result, two operand)

r 2000.10
*Want " cc/fpo    M=EF..FF+   M=7F..FF,   M=EF..FF+   1=00..01" 03000000 03020008 03000000 03020008
r 2010.10
*Want " cc/fpo    M=EF..FF+   0=00..00,   M=EF..FF+  -1=FF..FF" 02000000 02000000 02000000 02000000
r 2020.10
*Want " cc/fpo    M=EF..FF+-M  =80..01,   M=EF..FF+-M-1=80..00" 00000000 00000000 01000000 01000000
r 2030.10
*Want " cc/fpo    1=00..01+   M=7F..FF,   1=00..01+   1=00..01" 03000000 03020008 02000000 02000000
r 2040.10
*Want " cc/fpo    1=00..01+   0=00..00,   1=00..01+  -1=FF..FF" 02000000 02000000 00000000 00000000
r 2050.10
*Want " cc/fpo    1=00..01+-M  =80..01,   1=00..01+-M-1=80..00" 01000000 01000000 01000000 01000000
r 2060.10
*Want " cc/fpo    0=00..00+   M=7F..FF,   0=00..00+   1=00..01" 02000000 02000000 02000000 02000000
r 2070.10
*Want " cc/fpo    0=00..00+   0=00..00,   0=00..00+  -1=FF..FF" 00000000 00000000 01000000 01000000
r 2080.10
*Want " cc/fpo    0=00..00+-M  =80..01,   0=00..00+-M-1=80..00" 01000000 01000000 01000000 01000000
r 2090.10
*Want " cc/fpo   -1=FF..FF+   M=7F..FF,  -1=FF..FF+   1=00..01" 02000000 02000000 00000000 00000000
r 20A0.10
*Want " cc/fpo   -1=FF..FF+   0=00..00,  -1=FF..FF+  -1=FF..FF" 01000000 01000000 01000000 01000000
r 20B0.10
*Want " cc/fpo   -1=FF..FF+-M  =80..01,  -1=FF..FF+-M-1=80..00" 01000000 01000000 03000000 03020008
r 20C0.10
*Want " cc/fpo -M  =80..01+   M=7F..FF,-M  =80..01+   1=00..01" 00000000 00000000 01000000 01000000
r 20D0.10
*Want " cc/fpo -M  =80..01+   0=00..00,-M  =80..01+  -1=FF..FF" 01000000 01000000 01000000 01000000
r 20E0.10
*Want " cc/fpo -M  =80..01+-M  =80..01,-M  =80..01+-M-1=80..00" 03000000 03020008 03000000 03020008
r 20F0.10
*Want " cc/fpo -M-1=80..00+   M=7F..FF,-M-1=80..00+  +1=00..01" 01000000 01000000 01000000 01000000
r 2100.10
*Want " cc/fpo -M-1=80..00+   0=00..00,-M-1=80..00+  -1=FF..FF" 01000000 01000000 03000000 03020008
r 2110.10
*Want " cc/fpo -M-1=80..00+-M  =80..01,-M-1=80..00+-M-1=80..00" 03000000 03020008 03000000 03020008

# Results from AGR (64-bit operands and result, two operand)

r 1400.10
*Want "   G=7F..FF+   G=7F..FF                        " FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFE
r 1410.10
*Want "                           G=7F..FF+   1=00..01" 80000000 00000000 80000000 00000000
r 1420.10
*Want "   G=7F..FF+   0=00..00                        " 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 1430.10
*Want "                           G=7F..FF+  -1=FF..FF" 7FFFFFFF FFFFFFFE 7FFFFFFF FFFFFFFE
r 1440.10
*Want "   G=7F..FF+-G  =80..01                        " 00000000 00000000 00000000 00000000
r 1450.10
*Want "                           G=7F..FF+-G-1=80..00" FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 1460.10
*Want "   1=00..01+   G=7F..FF                        " 80000000 00000000 80000000 00000000
r 1470.10
*Want "                           1=00..01+   1=00..01" 00000000 00000002 00000000 00000002
r 1480.10
*Want "   1=00..01+   0=00..00                        " 00000000 00000001 00000000 00000001
r 1490.10
*Want "                           1=00..01+  -1=FF..FF" 00000000 00000000 00000000 00000000
r 14A0.10
*Want "   1=00..01+-G  =80..01                        " 80000000 00000002 80000000 00000002
r 14B0.10
*Want "                           1=00..01+-G-1=80..00" 80000000 00000001 80000000 00000001
r 14C0.10
*Want "   0=00..00+   G=7F..FF                        " 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 14D0.10
*Want "                           0=00..00+   1=00..01" 00000000 00000001 00000000 00000001
r 14E0.10
*Want "   0=00..00+   0=00..00                        " 00000000 00000000 00000000 00000000
r 14F0.10
*Want "                           0=00..00+  -1=FF..FF" FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 1500.10
*Want "   0=00..00+-G  =80..01                        " 80000000 00000001 80000000 00000001
r 1510.10
*Want "                           0=00..00+-M-1=80..00" 80000000 00000000 80000000 00000000
r 1520.10
*Want "  -1=FF..FF+   G=7F..FF                        " 7FFFFFFF FFFFFFFE 7FFFFFFF FFFFFFFE
r 1530.10
*Want "                          -1=FF..FF+   1=00..01" 00000000 00000000 00000000 00000000
r 1540.10
*Want "  -1=FF..FF+   0=00..00                        " FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 1550.10
*Want "                          -1=FF..FF+  -1=FF..FF" FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFE
r 1560.10
*Want "  -1=FF..FF+-G  =80..01,                       " 80000000 00000000 80000000 00000000
r 1570.10
*Want "                          -1=FF..FF+-G-1=80..00" 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 1580.10
*Want "-G  =80..01+   G=7F..FF                        " 00000000 00000000 00000000 00000000
r 1590.10
*Want "                        -G  =80..01+   1=00..01" 80000000 00000002 80000000 00000002
r 15A0.10
*Want "-G  =80..01+   0=00..00                        " 80000000 00000001 80000000 00000001
r 15B0.10
*Want "                        -G  =80..01+  -1=FF..FF" 80000000 00000000 80000000 00000000
r 15C0.10
*Want "-G  =80..01+-G  =80..01                        " 00000000 00000002 00000000 00000002
r 15D0.10
*Want "                        -G  =80..01+-G-1=80..00" 00000000 00000001 00000000 00000001
r 15E0.10
*Want "-G-1=80..00+   G=7F..FF                        " FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 15F0.10
*Want "                        -G-1=80..00+  +1=00..01" 80000000 00000001 80000000 00000001
r 1600.10
*Want "-G-1=80..00+   0=00..00                        " 80000000 00000000 80000000 00000000
r 1610.10
*Want "                        -G-1=80..00+  -1=FF..FF" 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 1620.10
*Want "-G-1=80..00+-M  =80..01                        " 00000000 00000001 00000000 00000001
r 1630.10
*Want "                        -G-1=80..00+-G-1=80..00" 00000000 00000000 00000000 00000000

# Condition codes and fixed point overflow interruptions from AGR (64-bit operands and result, two operand)

r 2400.10
*Want " cc/fpo    G=EF..FF+   G=7F..FF,   G=EF..FF+   1=00..01" 03000000 03040008 03000000 03040008
r 2410.10
*Want " cc/fpo    G=EF..FF+   0=00..00,   G=EF..FF+  -1=FF..FF" 02000000 02000000 02000000 02000000
r 2420.10
*Want " cc/fpo    M=EF..FF+-G  =80..01,   G=EF..FF+-G-1=80..00" 00000000 00000000 01000000 01000000
r 2430.10
*Want " cc/fpo    1=00..01+   G=7F..FF,   1=00..01+   1=00..01" 03000000 03040008 02000000 02000000
r 2440.10
*Want " cc/fpo    1=00..01+   0=00..00,   1=00..01+  -1=FF..FF" 02000000 02000000 00000000 00000000
r 2450.10
*Want " cc/fpo    1=00..01+-G  =80..01,   1=00..01+-G-1=80..00" 01000000 01000000 01000000 01000000
r 2460.10
*Want " cc/fpo    0=00..00+   M=7F..FF,   0=00..00+   1=00..01" 02000000 02000000 02000000 02000000
r 2470.10
*Want " cc/fpo    0=00..00+   0=00..00,   0=00..00+  -1=FF..FF" 00000000 00000000 01000000 01000000
r 2480.10
*Want " cc/fpo    0=00..00+-G  =80..01,   0=00..00+-G-1=80..00" 01000000 01000000 01000000 01000000
r 2490.10
*Want " cc/fpo   -1=FF..FF+   M=7F..FF,  -1=FF..FF+   1=00..01" 02000000 02000000 00000000 00000000
r 24A0.10
*Want " cc/fpo   -1=FF..FF+   0=00..00,  -1=FF..FF+  -1=FF..FF" 01000000 01000000 01000000 01000000
r 24B0.10
*Want " cc/fpo   -1=FF..FF+-G  =80..01,  -1=FF..FF+-G-1=80..00" 01000000 01000000 03000000 03040008
r 24C0.10
*Want " cc/fpo -G  =80..01+   M=7F..FF,-G  =80..01+   1=00..01" 00000000 00000000 01000000 01000000
r 24D0.10
*Want " cc/fpo -G  =80..01+   0=00..00,-G  =80..01+  -1=FF..FF" 01000000 01000000 01000000 01000000
r 24E0.10
*Want " cc/fpo -G  =80..01+-G  =80..01,-G  =80..01+-G-1=80..00" 03000000 03040008 03000000 03040008
r 24F0.10
*Want " cc/fpo -G-1=80..00+   M=7F..FF,-G-1=80..00+  +1=00..01" 01000000 01000000 01000000 01000000
r 2500.10
*Want " cc/fpo -G-1=80..00+   0=00..00,-G-1=80..00+  -1=FF..FF" 01000000 01000000 03000000 03040008
r 2510.10
*Want " cc/fpo -G-1=80..00+-G  =80..01,-G-1=80..00+-G-1=80..00" 03000000 03040008 03000000 03040008

# Results from SR (32-bit operands and result, two operand)

r 1800.10
*Want "   M=7F..FF-   M=7F..FF,   M=7F..FF-   1=00..01" 00000000 00000000 7FFFFFFE 7FFFFFFE
r 1810.10
*Want "   M=7F..FF-   0=00..00,   M=7F..FF-  -1=FF..FF" 7FFFFFFF 7FFFFFFF 80000000 80000000
r 1820.10
*Want "   M=7F..FF--M  =80..01,   M=7F..FF--M-1=80..00" FFFFFFFE FFFFFFFE FFFFFFFF FFFFFFFF
r 1830.10
*Want "   1=00..01-   M=7F..FF,   1=00..01-   1=00..01" 80000002 80000002 00000000 00000000
r 1840.10
*Want "   1=00..01-   0=00..00,   1=00..01-  -1=FF..FF" 00000001 00000001 00000002 00000002
r 1850.10
*Want "   1=00..01--M  =80..01,   1=00..01--M-1=80..00" 80000000 80000000 80000001 80000001
r 1860.10
*Want "   0=00..00-   M=7F..FF,   0=00..00-   1=00..01" 80000001 80000001 FFFFFFFF FFFFFFFF
r 1870.10
*Want "   0=00..00-   0=00..00,   0=00..00-  -1=FF..FF" 00000000 00000000 00000001 00000001
r 1880.10
*Want "   0=00..00--M  =80..01,   0=00..00--M-1=80..00" 7FFFFFFF 7FFFFFFF 80000000 80000000
r 1890.10
*Want "  -1=FF..FF-   M=7F..FF,  -1=FF..FF-   1=00..01" 80000000 80000000 FFFFFFFE FFFFFFFE
r 18A0.10
*Want "  -1=FF..FF-   0=00..00,  -1=FF..FF-  -1=FF..FF" FFFFFFFF FFFFFFFF 00000000 00000000
r 18B0.10
*Want "  -1=FF..FF--M  =80..01,  -1=FF..FF--M-1=80..00" 7FFFFFFE 7FFFFFFE 7FFFFFFF 7FFFFFFF
r 18C0.10
*Want "-M  =80..01-   M=7F..FF,-M  =80..01-   1=00..01" 00000002 00000002 80000000 80000000
r 18D0.10
*Want "-M  =80..01-   0=00..00,-M  =80..01-  -1=FF..FF" 80000001 80000001 80000002 80000002
r 18E0.10
*Want "-M  =80..01--M  =80..01,-M  =80..01--M-1=80..00" 00000000 00000000 00000001 00000001
r 18F0.10
*Want "-M-1=80..00-   M=7F..FF,-M-1=80..00-  +1=00..01" 00000001 00000001 7FFFFFFF 7FFFFFFF 
r 1900.10
*Want "-M-1=80..00-   0=00..00,-M-1=80..00-  -1=FF..FF" 80000000 80000000 80000001 80000001
r 1910.10
*Want "-M-1=80..00--M  =80..01,-M-1=80..00--M-1=80..00" FFFFFFFF FFFFFFFF 00000000 00000000

# Condition codes and fixed point overflow interruptions from SR (32-bit operands and result, two operand)

r 2800.10
*Want " cc/fpo    M=EF..FF-   M=7F..FF,   M=EF..FF-   1=00..01" 00000000 00000000 02000000 02000000
r 2810.10
*Want " cc/fpo    M=EF..FF-   0=00..00,   M=EF..FF-  -1=FF..FF" 02000000 02000000 03000000 03020008
r 2820.10
*Want " cc/fpo    M=EF..FF--M  =80..01,   M=EF..FF--M-1=80..00" 03000000 03020008 03000000 03020008
r 2830.10
*Want " cc/fpo    1=00..01-   M=7F..FF,   1=00..01-   1=00..01" 01000000 01000000 00000000 00000000
r 2840.10
*Want " cc/fpo    1=00..01-   0=00..00,   1=00..01-  -1=FF..FF" 02000000 02000000 02000000 02000000
r 2850.10
*Want " cc/fpo    1=00..01--M  =80..01,   1=00..01--M-1=80..00" 03000000 03020008 03000000 03020008
r 2860.10
*Want " cc/fpo    0=00..00-   M=7F..FF,   0=00..00-   1=00..01" 01000000 01000000 01000000 01000000
r 2870.10
*Want " cc/fpo    0=00..00-   0=00..00,   0=00..00-  -1=FF..FF" 00000000 00000000 02000000 02000000
r 2880.10
*Want " cc/fpo    0=00..00--M  =80..01,   0=00..00--M-1=80..00" 02000000 02000000 03000000 03020008
r 2890.10
*Want " cc/fpo   -1=FF..FF-   M=7F..FF,  -1=FF..FF-   1=00..01" 01000000 01000000 01000000 01000000
r 28A0.10
*Want " cc/fpo   -1=FF..FF-   0=00..00,  -1=FF..FF-  -1=FF..FF" 01000000 01000000 00000000 00000000
r 28B0.10
*Want " cc/fpo   -1=FF..FF--M  =80..01,  -1=FF..FF--M-1=80..00" 02000000 02000000 02000000 02000000
r 28C0.10
*Want " cc/fpo -M  =80..01-   M=7F..FF,-M  =80..01-   1=00..01" 03000000 03020008 01000000 01000000
r 28D0.10
*Want " cc/fpo -M  =80..01-   0=00..00,-M  =80..01-  -1=FF..FF" 01000000 01000000 01000000 01000000
r 28E0.10
*Want " cc/fpo -M  =80..01--M  =80..01,-M  =80..01--M-1=80..00" 00000000 00000000 02000000 02000000
r 28F0.10
*Want " cc/fpo -M-1=80..00-   M=7F..FF,-M-1=80..00-  +1=00..01" 03000000 03020008 03000000 03020008
r 2900.10
*Want " cc/fpo -M-1=80..00-   0=00..00,-M-1=80..00-  -1=FF..FF" 01000000 01000000 01000000 01000000
r 2910.10
*Want " cc/fpo -M-1=80..00--M  =80..01,-M-1=80..00--M-1=80..00" 01000000 01000000 00000000 00000000

# Results from SGR (64-bit operands and result, two operand)

r 1C00.10
*Want "   G=7F..FF-   G=7F..FF                        " 00000000 00000000 00000000 00000000
r 1C10.10
*Want "                           G=7F..FF-   1=00..01" 7FFFFFFF FFFFFFFE 7FFFFFFF FFFFFFFE
r 1C20.10
*Want "   G=7F..FF-   0=00..00                        " 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 1C30.10
*Want "                           G=7F..FF-  -1=FF..FF" 80000000 00000000 80000000 00000000
r 1C40.10
*Want "   G=7F..FF--G  =80..01                        " FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFE 
r 1C50.10
*Want "                           G=7F..FF--G-1=80..00" FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 1C60.10
*Want "   1=00..01-   G=7F..FF                        " 80000000 00000002 80000000 00000002
r 1C70.10
*Want "                           1=00..01-   1=00..01" 00000000 00000000 00000000 00000000
r 1C80.10
*Want "   1=00..01-   0=00..00                        " 00000000 00000001 00000000 00000001
r 1C90.10
*Want "                           1=00..01-  -1=FF..FF" 00000000 00000002 00000000 00000002
r 1CA0.10
*Want "   1=00..01--G  =80..01                        " 80000000 00000000 80000000 00000000
r 1CB0.10
*Want "                           1=00..01--G-1=80..00" 80000000 00000001 80000000 00000001
r 1CC0.10
*Want "   0=00..00-   G=7F..FF                        " 80000000 00000001 80000000 00000001
r 1CD0.10
*Want "                           0=00..00-   1=00..01" FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 1CE0.10
*Want "   0=00..00-   0=00..00                        " 00000000 00000000 00000000 00000000
r 1CF0.10
*Want "                           0=00..00-  -1=FF..FF" 00000000 00000001 00000000 00000001
r 1D00.10
*Want "   0=00..00--G  =80..01                        " 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 1D10.10
*Want "                           0=00..00--G-1=80..00" 80000000 00000000 80000000 00000000
r 1D20.10
*Want "  -1=FF..FF-   G=7F..FF                        " 80000000 00000000 80000000 00000000
r 1D30.10
*Want "                          -1=FF..FF-   1=00..01" FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFE
r 1D40.10
*Want "  -1=FF..FF-   0=00..00                        " FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 1D50.10
*Want "                          -1=FF..FF-  -1=FF..FF" 00000000 00000000 00000000 00000000
r 1D60.10
*Want "  -1=FF..FF--G  =80..01,                       " 7FFFFFFF FFFFFFFE 7FFFFFFF FFFFFFFE
r 1D70.10
*Want "                          -1=FF..FF--G-1=80..00" 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 1D80.10
*Want "-G  =80..01-   G=7F..FF                        " 00000000 00000002 00000000 00000002
r 1D90.10
*Want "                        -G  =80..01-   1=00..01" 80000000 00000000 80000000 00000000
r 1DA0.10
*Want "-G  =80..01-   0=00..00                        " 80000000 00000001 80000000 00000001
r 1DB0.10
*Want "                        -G  =80..01-  -1=FF..FF" 80000000 00000002 80000000 00000002
r 1DC0.10
*Want "-G  =80..01--G  =80..01                        " 00000000 00000000 00000000 00000000
r 1DD0.10
*Want "                        -G  =80..01--G-1=80..00" 00000000 00000001 00000000 00000001
r 1DE0.10
*Want "-G-1=80..00-   G=7F..FF                        " 00000000 00000001 00000000 00000001
r 1DF0.10
*Want "                        -G-1=80..00-  +1=00..01" 7FFFFFFF FFFFFFFF 7FFFFFFF FFFFFFFF
r 1E00.10
*Want "-G-1=80..00-   0=00..00                        " 80000000 00000000 80000000 00000000
r 1E10.10
*Want "                        -G-1=80..00-  -1=FF..FF" 80000000 00000001 80000000 00000001
r 1E20.10
*Want "-G-1=80..00--G  =80..01                        " FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
r 1E30.10
*Want "                        -G-1=80..00--G-1=80..00" 00000000 00000000 00000000 00000000

# Condition codes and fixed point overflow interruptions from SGR (64-bit operands and result, two operand)

r 2C00.10
*Want " cc/fpo    G=EF..FF-   G=7F..FF,   G=EF..FF-   1=00..01" 00000000 00000000 02000000 02000000
r 2C10.10
*Want " cc/fpo    G=EF..FF-   0=00..00,   G=EF..FF-  -1=FF..FF" 02000000 02000000 03000000 03040008
r 2C20.10
*Want " cc/fpo    G=EF..FF--G  =80..01,   G=EF..FF--G-1=80..00" 03000000 03040008 03000000 03040008
r 2C30.10
*Want " cc/fpo    1=00..01-   G=7F..FF,   1=00..01-   1=00..01" 01000000 01000000 00000000 00000000
r 2C40.10
*Want " cc/fpo    1=00..01-   0=00..00,   1=00..01-  -1=FF..FF" 02000000 02000000 02000000 02000000
r 2C50.10
*Want " cc/fpo    1=00..01--G  =80..01,   1=00..01--G-1=80..00" 03000000 03040008 03000000 03040008
r 2C60.10
*Want " cc/fpo    0=00..00-   M=7F..FF,   0=00..00-   1=00..01" 01000000 01000000 01000000 01000000
r 2C70.10
*Want " cc/fpo    0=00..00-   0=00..00,   0=00..00-  -1=FF..FF" 00000000 00000000 02000000 02000000
r 2C80.10
*Want " cc/fpo    0=00..00--G  =80..01,   0=00..00--G-1=80..00" 02000000 02000000 03000000 03040008
r 2C90.10
*Want " cc/fpo   -1=FF..FF-   G=7F..FF,  -1=FF..FF-   1=00..01" 01000000 01000000 01000000 01000000
r 2CA0.10
*Want " cc/fpo   -1=FF..FF-   0=00..00,  -1=FF..FF-  -1=FF..FF" 01000000 01000000 00000000 00000000
r 2CB0.10
*Want " cc/fpo   -1=FF..FF--G  =80..01,  -1=FF..FF--G-1=80..00" 02000000 02000000 02000000 02000000
r 2CC0.10
*Want " cc/fpo -G  =80..01-   G=7F..FF,-G  =80..01-   1=00..01" 03000000 03040008 01000000 01000000
r 2CD0.10
*Want " cc/fpo -G  =80..01-   0=00..00,-G  =80..01-  -1=FF..FF" 01000000 01000000 01000000 01000000
r 2CE0.10
*Want " cc/fpo -G  =80..01--G  =80..01,-G  =80..01--G-1=80..00" 00000000 00000000 02000000 02000000
r 2CF0.10
*Want " cc/fpo -G-1=80..00-   G=7F..FF,-G-1=80..00-  +1=00..01" 03000000 03040008 03000000 03040008
r 2D00.10
*Want " cc/fpo -G-1=80..00-   0=00..00,-G-1=80..00-  -1=FF..FF" 01000000 01000000 01000000 01000000
r 2D10.10
*Want " cc/fpo -G-1=80..00--G  =80..01,-G-1=80..00--G-1=80..00" 01000000 01000000 00000000 00000000



# Restore program check messages

ostailor default    

*Done

